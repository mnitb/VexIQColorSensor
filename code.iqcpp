{"mode":"Text","textContent":"// Include the IQ Library\n#include \"iq_cpp.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\nbool tg;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.setDriveVelocity(70.0, percent);\n  Color9.setLight(10, percent);\n  while (true) {\n    Drivetrain.setDriveVelocity(70.0, percent);\n    if (static_cast<float>(Color9.brightness()) < 15.0) {\n      tg = true;\n      Drivetrain.drive(forward);\n    }\n    else {\n      Brain.Timer.reset();\n      while ((static_cast<float>(Color9.brightness()) > 15.0)) {\n        if (Brain.Timer.value() < 5.0 && tg) {\n          Drivetrain.turnFor(left, 7.0, degrees, true);\n          if (static_cast<float>(Color9.brightness()) > 15.0) {\n            Drivetrain.turnFor(right, 10.0, degrees, true);\n          }\n          if (static_cast<float>(Color9.brightness()) > 15.0) {\n            Drivetrain.turnFor(right, 15.0, degrees, true);\n          }\n          tg = false;\n        }\n        else {\n          Brain.Timer.reset();\n          if (Brain.Timer.value() < 2) {\n            Drivetrain.turnFor(left, 5.0, degrees, true);\n          }\n          else {\n            if (static_cast<float>(Color9.brightness()) > 15.0) {\n              Drivetrain.turnFor(right, 5.0, degrees, true);\n            }\n          }\n        }\n      wait(20, msec);\n      }\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\n\nint main() {\n  calibrateDrivetrain();\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[11,8,10],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"smart","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm"},"triportSourcePort":22},{"port":[9],"name":"Color9","customName":false,"deviceType":"Color","setting":{},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}